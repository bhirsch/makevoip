<?php
// Automatically generated by features module.
include_once('callblast.features.inc');

// Custom code and logic.
include_once('includes/callblast.inc');
include_once('includes/callblast.script.inc');

/**
 * @file callblast.module
 *   Drupal hooks implemented for VOIP call blasts.
 */
 
/**
 * Implementation of hook_help(). 
 */
function callblast_help($path, $arg) {
  if ($path == 'admin/help#callblast') {
    $txt = t('This module creates provides voip '
            .'call blast functionality. ');
    return $txt;
  }
}

/**
 * Implementation of hook_menu().
 */
function callblast_menu() {
  $items = array();

 // Send callblast now 
  $items['callblast/send/%node'] = array(
    'title' => 'Call Blast: Send',
    'page callback' => 'callblast_send',
    'page arguments' => array(2),
    'access arguments' => array('send now'),
    'type' => MENU_CALLBACK,
    'file' => 'includes/callblast.inc',
  );
  
 // Call back for auto-complete on node/add and node/edit form
  $items['callblast/list/autocomplete'] = array(
    'title' => 'Call Blast Autocomplete List',
    'page callback' => 'callblast_list_autocomplete',
    'access arguments' => array('access content'),
    'type' => MENU_CALLBACK,
    'file' => 'includes/callblast.inc',
  );
  
  return $items;
}

/**
 * Implementation of hook_perm().
 */
function callblast_perm() {
  return array('send now');
}

/**
 * Implementation of hook_block().
 */
function callblast_block($op = 'list', $delta = 0, $edit = array()) {
  if ($op == 'list') {
    $blocks[0]['info'] = t('Call Blast Status');
    return $blocks;
  }
  else if ($op == 'view') {
    switch($delta) {
      case 0: 
        $block['subject'] = t('Call Blast Status');
        $block['content'] = theme('callblast_block'); 
      break;
    }
    return $block; 
  }
}

/**
 * Implementation of hook_theme().
 */
function callblast_theme() {
  return array(
    'callblast_block' => array(
      'arguments' => array(),
    ),
    'callblast_formatter_callblast_list' => array(
      'arguments' => array('element' => NULL),
    ),
    'callblast_formatter_callblast_list_title' => array(
      'arguments' => array('element' => NULL),
    ),
    'callblast_formatter_callblast_list_calls_link' => array(
      'arguments' => array('element' => NULL),
    ),
    'callblast_formatter_callblast_edit_link' => array(
      'arguments' => array('element' => NULL),
    ),
  );
}

/**
 * Callback for theme_callblast_list().
 * 
 * @param $element
 *  array, I think this is the $element being passed by CCK here.
 */
function theme_callblast_formatter_callblast_list($element) {
  $output = callblast_list_default($element['#item']['safe']);
  return $output;
}

/**
 * Callback for theme_callblast_list_title().
 * 
 * @param $element
 *  array, I think this is the $element being passed by CCK here.
 */
function theme_callblast_formatter_callblast_list_title($element) {
  $output = callblast_list_title($element['#item']['safe']);
  return $output;
}

/**
 * Callback for theme_callblast_list_calls_link().
 * 
 * @param $element
 *  array, I think this is the $element being passed by CCK here.
 * 
 * todo Replace this workaround with a proper Views handler to create a View Calls link.
 */
function theme_callblast_formatter_callblast_list_calls_link($element) {
  $txt = t('View Calls');
  $path = 'callstatus';
  $options = array('query' => 'callblast_nid='. $element['#node']->nid);
  $output = l($txt, $path, $options);

  return $output;
}

/**
 * Callback for theme_callblast_list_calls_link().
 * 
 * @param $element
 *  array, I think this is the $element being passed by CCK here.
 * 
 * todo Replace this workaround with a proper Views handler to create a callblast-status-aware edit link.
 * todo Use hook_nodeapi and hook_menu_alter to actually prevent user from editing sent callblasts.
 */
function theme_callblast_formatter_callblast_edit_link($element) {
  $node = $element['#node'];
  $blast_sent = $node->node_data_field_callblast_audio_file_field_blast_sent_value;
  // only return an edit link if blast has NOT been sent yet.
  if (!$blast_sent) {
    $txt = t('edit');
    $path = 'node/'. $node->nid .'/edit';
    $output = l($txt, $path);
    return $output;
  } else {
    return '';
  }
}

/**
 * Callback for theme_callblast_block().
 * 
 * Create a block with links to views included
 * in callblast feature module.
 * 
 * @return
 *  $output, html, content of block
 */
function theme_callblast_block() {
  $output = '<div class="callblast">';

  // link to call blast page View
  $txt = t('Call Blasts');
  $path = 'callblast';
  $output .= '<h4>'. l($txt, $path) .'</h4>';

  $txt = t('Calls');
  $path = 'callstatus';
  $output .= '<h4>'. l($txt, $path) .'</h4>';
  
  $output .= '</div>';

  return $output;
}

/**
 * Implementation of hook_form_alter().
 * 
 * TODO Delete this if we don't end up using voipfield.
 */
function callblast_form_alter(&$form, &$form_state, $form_id){
  // callblast node form
  if ($form_id == 'callblast_node_form') {
    // Form buttons: 
    // Add "Send Now" button
    $form['buttons']['send'] = array(
      '#type' => 'submit',
      '#value' => t('Send Now'),
      '#access' => user_access('send now'),
      '#submit' => array('node_form_submit', '_callblast_send_now'),
      '#weight' => 7,
    );
    // Change "Save" to "Send at Scheduled time"
    $form['buttons']['submit']['#value'] = t('Save and Send at Scheduled Time');
    // Get rid of preview button, we don't need it.
    unset($form['buttons']['preview']);
    

    // Usability:
    // Hide 'blast sent', start time and end time
    // fields for users other than user 1.
    global $user;
    if ($user->uid != 1) {
      $form['field_blast_sent']['#access'] = FALSE;
      $form['field_callblast_start']['#access'] = FALSE;
      $form['field_callblast_end']['#access'] = FALSE;
    }
    /**
     * If voipfield module is NOT enabled
     * hide the Main Message URL field. 
     */
    if(!function_exists('voipfield_form_alter')) {
      $form['field_callblast_audio_url']['#type'] = 'hidden';
    }
  }
}

/**
 * Implementation of hook_nodeapi().
 */
function callblast_nodeapi(&$node, $op, $a3 = NULL, $a4 = NULL) {
  if ($op == 'presave' and $node->type == 'callblast') {
    // Only save callblast list name.
    // Don't store human readable name or '(((' ')))'
    $list_name = $node->field_callblast_calllist[0]['value'];
    if (substr($list_name, -3) == ')))' ) {
      $list_name = explode('(((', $list_name);
      $list_name = trim(substr($list_name[1], 0, -3));
      $node->field_callblast_calllist[0]['value'] = $list_name;
    }
  }
}

/**
 * On cron, run call blasts.
 * 
 * Implementation of hook_cron().
 */
function callblast_cron() {
  // Run scheduled call blasts.
  callblast_run();
}

//==========================================//
// DEFINING THE CALLIST WIDGET
// see example:  http://www.lullabot.com/articles/creating-custom-cck-fields
//==========================================//

/**
* Implementation of hook_widget_info().
*
* Here we indicate that the content module will handle
* the default value and multiple values for these widgets.
*
* Callbacks are omitted because default handing is used.
*/
function callblast_widget_info() {
  return array(
    // The machine name of the widget
    'callblast_calllist' => array(
      'label' => t('Call List'),
      'field types' => array('text'),
      // 'multiple values' => CONTENT_HANDLE_CORE,
      'callbacks' => array(
        'default value' => CONTENT_CALLBACK_DEFAULT,
      ),
    ),
  );
}

/**
* Implementation of hook_widget_settings().
* 
* TODO Add hok_widget_settings(). 
* Allow multiple values? (e.g. combine call lists 
* like "summer volunteers" + "interns" CiviCRM groups?)
*/

/**
* Implementation of hook_widget().
*
* @param $form
*   the entire form array, 
*   $form['#node'] holds node information
* @param $form_state
*   the form_state, 
*   $form_state['values'][$field['field_name']]
*   holds the field's form values.
* @param $field
*   the field array
* @param $items
*   array of default values for this field
* @param $delta
*   the order of this item in the array of 
*   subelements (0, 1, 2, etc)
*
* @return
*   the form item for a single element for this field
*/
function callblast_widget(&$form, &$form_state, $field, $items, $delta = 0) {
  $element['value'] = array(
    '#title' => t('Call List'), 
    '#type' => 'textfield',
    '#default_value' => callblast_list_default($items[$delta]['value']),
    '#autocomplete_path' => 'callblast/list/autocomplete',
    '#size' =>  60,
    '#attributes' => array('class' => 'callblast_calllist'),
    '#maxlength' => !empty($field['max_length']) ? $field['max_length'] : NULL,
  );
  
  // Used so that hook_field('validate') knows where to 
  // flag an error in deeply nested forms.
  if (empty($form['#parents'])) {
    $form['#parents'] = array();
  }
  $element['_error_element'] = array(
    '#type' => 'value',
    '#value' => implode('][', array_merge($form['#parents'], array('value'))),
  );
  return $element;
}

/**
 * hook_field_formatter_info()
 */
function callblast_field_formatter_info() {
  return array(
    'callblast_list' => array(
      'label' => 'Call List',
      'field types' => array('text'),
    ),
    'callblast_list_title' => array(
      'label' => 'Call List Title',
      'field types' => array('text'),
    ),
    'callblast_list_calls_link' => array( // todo temp. replace. see todo note at theme function.
      'label' => 'Call List Calls Link',
      'field types' => array('text'),
    ),
    'callblast_edit_link' => array(      // todo temp. replace. see todo note at theme function.
      'label' => 'Call Blast Edit Link', 
      'field types' => array('text'),
    ),
  );
}

//=============//
// End Widget
//=============//
