<?php
/**
 * @file voipfield.module
 *  Implement Voip CCK field. 
 */ 

// include voip script
require_once('voipfield.script.inc');

/**
 * Implementation of hook_menu().
 */
function voipfield_menu() {
  $items['voipfield/js'] = array(
    'title' => 'voipfield',
    'page callback' => 'voipfield_js',
    'type' => MENU_CALLBACK,
    'access arguments' => array('access content'),
  );

  return $items;
}

/**
 * Implementation of hook_form_alter().
 */
function voipfield_form_alter(&$form, &$form_state, $form_id) {
  if ($form_id == 'callblast_node_form') {
    //dsm($form);
//    $form['field_callblast_audio_url']['#type'] = 'hidden';
    $form['main_message_url'] = array(
      '#type' => 'button',
      '#value' => t('Record Message'),
      '#weight' => $form['field_callblast_audio_url']['#weight'] +1,
      '#submit' => array('voipfield_form_submit'),//none JS version
      '#prefix' => '<div id="edit-field-callblast-audio-url-0-value-wrapper">',
      // '#prefix' => '<div id="main-message-url">',
      // '#prefix' => '<div id="testing123">',
      '#suffix' => '</div>',
      '#ahah' => array(
        'event' => 'click',
        'path' => 'voipfield/js',
        'wrapper' => 'edit-field-callblast-audio-url-0-value-wrapper',
        //'wrapper' => 'testing123',
        // 'wrapper' => 'edit-voipfield',
        'method' => 'replace',
        'effect' => 'fade',
        'progress' => array(
          'type' => 'bar',
          'message' => t('Loading...')
        ),
      ),
    );
    /*
    $form['voipfield'] = array(
      '#type' => 'submit',
      '#value' => t('Record Message'),
      '#weight' => $form['field_callblast_audio_url']['#weight'] +1,
      '#submit' => array('voipfield_form_submit'),//none JS version
      '#ahah' => array(
        'event' => 'click',
        'path' => 'voipfield/js',
        'wrapper' => 'testing123',
        // 'wrapper' => 'edit-voipfield',
        'method' => 'replace',
        'effect' => 'fade',
        'progress' => array(
          'type' => 'bar',
          'message' => t('Loading...')
        ),
      ),
    );
    // */
    /*
    $form['sample'] = array(
      '#type' => 'item',
      '#value' => t('Sample'),
      '#weight' => $form['field_callblast_audio_url']['#weight'],
      '#prefix' => '<div id="testing123">',
      '#sufix' => '</div>',
    );
    // */
  }
}

/**
 * Callback for voipfield/js.
 */
function voipfield_js() {
  $element = array(
   '#type' => 'select',
    '#title' => 'You selected that because...',
    '#options' => array(
      '1' => 'Testing 1',
      '2' => 'Testing 2',
      '3' => "Testing 3"
    ),
  ); 
  $output = voipfield_process($element, 'test123');
  
  $json = drupal_json(
    array(
      'status' => TRUE, 
      'data' => $output,
     )
  );
  return $json;
}

function voipfield_process($element, $name) {
  $form_state = array('submitted' => FALSE);
  $form_build_id = $_POST['form_build_id'];
    // Add the new element to the stored form. Without adding the element to the
  // form, Drupal is not aware of this new elements existence and will not
  // process it. We retreive the cached form, add the element, and resave.
  $form = form_get_cache($form_build_id, $form_state);
  $form[$name] = $element;
  form_set_cache($form_build_id, $form, $form_state);
//dsm($form);
  $form += array(
    '#post' => $_POST,
    '#programmed' => FALSE,
  );
  // Rebuild the form.
  $form = form_builder($_POST['form_id'], $form, $form_state);
  // Render the new output.
  $new_form = $form[$name];
  return drupal_render($new_form);  
}

/**
 * @param 
 *  $number, string, phone number to call to record message.
 * 
 * @return
 *  $url, string, URL for voice recording.
 */
function voipfield_record($number) {
  // Create a voipcall node for the call that's about to be placed
  // to prompt user to record a message.
  $details['scheduled start'] = time(); 
  $details['script_name'] = 'voipfield_record'; 
  $details['dest_number'] = check_plain($number);
  // save voipcall node
  $voipcall_node = voipcall_save($details);
// dsm($voipcall_node);
  // place outgoing call
  $request_id = 'voip_dial_out';
  voip_send_request($request_id, $voipcall_node);

// CONTINUE HERE

  // capture url of voice recording

  return $url;
}

//==========================================//
// DEFINING THE CALLIST WIDGET
// see example:  http://www.lullabot.com/articles/creating-custom-cck-fields
//==========================================//

/**
* Implementation of hook_widget_info().
*
* Here we indicate that the content module will handle
* the default value and multiple values for these widgets.
*
* Callbacks are omitted because default handing is used.
*/
/*
function voipfield_widget_info() {
  return array(
    // The machine name of the widget, no more than 32 
    // characters.
    'voipfield' => array(
      // The human-readable label of the field that will be 
      // seen in the Manage fields screen.
      'label' => t('Voice Recording'),
      // An array of the field types this widget can be 
      // used with.
      'field types' => array('text'),
      // Who will handle multiple values, default is core.
      // 'CONTENT_HANDLE_MODULE' means the module does it.
      // See optionwidgets for an example of a module that 
      // handles its own multiple values.
//      'multiple values' => CONTENT_HANDLE_CORE,
      'callbacks' => array(
        // Who will create the default value, default is core.
        // 'CONTENT_CALLBACK_CUSTOM' means the module does it.
        // 'CONTENT_CALLBACK_NONE' means this widget has 
        // no default value.
        'default value' => CONTENT_CALLBACK_DEFAULT,
      ),
    ),
  );
}
// */

/**
 * Implementation of hook_widget_settings().
 * 
 * TODO Add hok_widget_settings(). 
 */

/**
 * Implementation of hook_widget().
 *
 * @param $form
 *   the entire form array, 
 *   $form['#node'] holds node information
 * @param $form_state
 *   the form_state, 
 *   $form_state['values'][$field['field_name']]
 *   holds the field's form values.
 * @param $field
 *   the field array
 * @param $items
 *   array of default values for this field
 * @param $delta
 *   the order of this item in the array of 
 *   subelements (0, 1, 2, etc)
 *
 * @return
 *   the form item for a single element for this field
 */
/*
function voipfield_widget(&$form, &$form_state, $field, $items, $delta = 0) {
  $element['value'] = array(
    '#title' => t('Voice Recording'),
    '#type' => 'textfield',
    '#default_value' => isset($items[$delta]['value']) ? $items[$delta]['value'] : NULL,
    '#size' =>  60,
    '#maxlength' => !empty($field['max_length']) ? $field['max_length'] : NULL,
  );

  // Used so that hook_field('validate') knows where to 
  // flag an error in deeply nested forms.
  if (empty($form['#parents'])) {
    $form['#parents'] = array();
  }
  $element['_error_element'] = array(
    '#type' => 'value',
    '#value' => implode('][', array_merge($form['#parents'], array('value'))),
  );
  return $element;
}
// */

//================//
// End Widget
//================//
